web - разработка
1. Некоторые действия возможны только из командной строки
2. Для управления сервером. ( так ка в основном имею доступ только из командной строки)
3. Конвеер

сортировка в файле (текстовом) выполняется командой
cat menu.txt|sort|uniq-c|sort-r


команды бывают с обязательными параметрами и необязательными
все команды строятся примерно по следующему принципу КОМАНДА ИМЯ ФАЙЛА

осносные комаенды:
команды без параметров

1 -  ls - отображение директории(что в ней)
2 -  pwd - отображение текущей директории

комады с обязательными параметрами

3 - mkdir - создание директории
( mkdir test1/ )

4 - cd - смена директории
( cd test1 - где test1 это папка для перемежения.
если после перехода ввести команду pwd - она покажет полный путь для перемещешия )

5 - touch - создание файла
( touch file1.txt ) - при создании файл будет пустым
5.1. - nano (текстовый редактор lumix) - он открывает файл сразу на редактирование.
( nano file1.txt )
6 - cat открывает файл для просмотра вкомандной строке
( cat file1.txt )
7 - cp - копирование
( cp file1.txt /home/lives/Desktop/
file1.txt - имя файла который копируется
8 - mv - перенос файда
( mv /home/lives/Desktop/file1.txt ./file1.txt
./file1.txt  - относительный путь, т.е. путь от текущей папки )
9 - rm - удвление файлов
(rm ~/test1/file2.txt  , где ~ - ооооозначает рабочую директорию)
10 - для очистки рабочией области - cnt+l или clear

встроенные аргументы (ключи)
1. ls -l
Будет выведена на экран полная информация, а не только названия
2. rm -r test1 - для удаления папки
3. rm --recursive test/ - удалить все что вложено в папку вместе с папкой
4. чтобы узать о команде --help

сокращения
автозаполнение ls De - нажать tab и допишется название папки или предложит какие есть с началом обинакового названия

при запуске интрапритатора (напримет python3 )
изнего нужно выходить или командой exit() или ctrl + c

(на всякий - запустить сервер в django через командную строку
python3 manage.py runserver)

Выполнение одновременно несколько действий
cd Desktop/3.4-django_test/ (-переход в папку) && source env/bin/activate (-запуск виртуального окружения) && python3 manage.py runserver (- запуск сервера)

пренаправление потоков ввода/вывода
ls Desktop/ > list.txt - дословно вывести ls в файле list.txt
если нужно дописать к содержимому дополнительную информацию -  >>
посмотреть можно в nano - nano list.txt
или
cat < list.txt
(когда происходит запись - используем знак больше,
 когда выводим - используем знак меньше)

вывод определенных файлов наприпример с расширением pdf
ls Download/ | (-осначает применить) grep '.pdf' (- по фильру .pdf)


работа с файлом:
условие:
есть файил с блюдами его нужно отсортировать и посчитать
1. cat menu.txt | sort
2. cat menu.txt | sort | uniq -c (без ключа -с он не будт считать, только уберет повторения)
3. cat menu.txt | sort | uniq -c | sort (поумолчанию - сортировка по возрастанию)

отличие / и |
| - работа с данными
/ - работа с действиями

переменное окружение
для записи в системную перепенную используется export
expotr PASSWORD=1234
можно задавать при запуске программы
PASSWORD=1234 python3 main.py этого запускаем данный файил - и оно будет более приоритетным
и однократно для одной команди и один раз

для примера откроем main.py
import os - нужно для работой с файлами операционной системы
PASS = os.getenv('PASSWORD') - указываем название переменной которую хотим получить
print (PASS) - для вывода на экран

python3 main.py этого запускаем данный файил

когда в python используется много переменных (в системном файле)
-используется специальный модуль
pip install python-dotenv или python-decouple
django-environ - для django

как работают модули:
1. создается файл .env и в этот модуль помещается все переменные,
которые будут использоваться в системном файле
2.
import os - нужно для работой с файлами операционной системы
from dotenv import load_dotenv - импортируем модуль
load_dotenv() - вызываем модуль
PASS = os.getenv('PASSWORD') - указываем название переменной которую хотим получить
print (PASS) - для вывода на экран

Пакеты
установка пакета
sudo (-супер пользователь) apt install (далее название пакета)
удаление пакета
sudo apt remove (название пакета)

практика с сервером
Для подключения к серверу нужно
ssh login@ip_adress
ssh root@31.140.198.140
после подключения к серверу создаем нового пользователя
adduser sergey
придумать пароль
назначаем нового пользователя супер-пользователем
usermob sergey -aG sudo
после этого можно или переключиться на нашего нового пользовател ии перелогиниться
su - для переключения
переходим в домашнюю директорию созданного пользователя
cd -

устанавливаем окружние
sudo apt update обновление списка доступных пакетов, upgrate - скачивает эти обновления
проверяем что установновлено.
Если естановлено python и git
доустанавливаем дополнительно другие пакеты
1. sudo apt install python3-venv
2. sudo apt install python3-pip postgresql
(пакеты можно устанавливать по одному или перечисляя их через пробел)

идем на git hub - копируем нужный репозиторий (ссылку)
возвращаемся на сервер и делаем клон репозитория
git clone далее путь который скопировали
переходим в нужную папку
(данном случае djabngo)
запускаем виртуальное окружение python3 -m venv env (-env это название папки. какое название будет указано такое и нужно будет активировать)
активируем виртуальное окружение
source env/bin/activate
устанавливаем нужные нам пакеты для проекта указанные в файле requirements.txt
pip install -r requirements.txt
проверяем при помощи pip freeze
теперь требуется создать базу данных
1. переключаемся на пользователя sudo su postgres
2. этим пользователем подключаемяся в psql
3. Можно работать под postgres, но так же можно создать альтернативного пользователя
(для примера:
ALTER USER postgres WITH PASSWORD '12345';
- где ALTER USER - другой пользователь
- WITH PASSWORD -задаем пароль, '12345' - пароль)
4. Создаем базу данных
CREATE DATABASE crut;
- где crut - база данных
5. Проверяем, что быза данных создана - \l

6.1 Если хотим создать своего пользователя, то:
- CREATE USER sergey_db WITH PASSWORD '1234';
где sergey_db - это новы пользователь
1234 - пароль этого пользователя

6.2  Назначаем его супер пользователем
ALTER USER sergey_db WITH SUPERUSER;

6.3 Нужно создать базу данных с тем пользователем с который хотим работать
- CREATE DATEABASE sergey_db;

6.4 Чтобы пользователь мог использовать базу данных созданных другим пользователем нужно:
- GRANT ALL PRIVILEGES ON DATABASE crut TO sergey_db; устанвавливаем разрешение на управления
базой данных crut пользователю sergey_db

7. нужно войти в файл settings.py (можно через nano)
nano stocks_products/settings.py  и изменить данные в настройках базы данных
также в ALLOWED_HOSTS = ['добавить адрес хоста на котором крутится проект']

8. Как проверить, что все настроено верно так же как и в DJango
python3 manage.py migrate

9. запускаем проект - python3 manage.py runserver
runserver предназначен для того, чтобы запускать сервер джанго локально
т.о. - доспуп к сайту можно получить только с компьютера на котором запущен django

9.1 если не пользоваться сервеом - он вылтает за ~60 секунд
если при этом запущен django, то восле повторного подключения мы его не можем не остановать и не запустить.
для этого: fuser -k 8000/tcp - закывает runserver

10. Воспользоваться запущенным проектом сервер нужно запускать
python manage.py runserver 0.0.0.0:8000

10.1 попасть в проект:
в браузере набераем адрес хоста и добовлем :8000 (- поумолчанию на чем запущен проект)


Переменные окружения:
нужно в проэкте уюрать все секретные переменные
для этого устанвавливаем:
    1. python-dotenv
    2. python-decouple
    3. djabngo-environ - только для джанго
создаем файл .env и в нем пишем все данные которые хотим убрать
например:
SECRET_KEY=EFLKN WKJQFWOJEX;SZDMQ[W;LDFMWR;VSLN
DEBAG=True (это режим отладки тру или фолс)
ALLOWED_HOSTS=122.121.121.13,.......,133.313.231.32 - пишем все свои адреса через запятую
и так же другие настройки которые хотим убрать

для задействования данных бибоиотек
    1. dotenv
в файле settings импортируем
import os
from dotenv import load_dotenv
load_dotenv() - вызываем функцию
после этого заменяем значения на переременные которые мы написали в файле .env
SECRET_KEY=os.getenv('SECRET_KEY')
.......

    2.decouple
В файле settings.py импортируем
from decouple import comfrg
SECRET_KEY = config('SECRET_KEY') ((= config('SECRET_KEY' , cast=bool)
.....приимушество в том, что может приводить данные к тому значению, что указано

    3. В файле settings.py импортируем
import environ
под строкой BASE_DIR (папка где лежат настройки)
env = environ.Env() - вызываем класс environ
environ.Env.read_env(os.pach.join(BASE_DIR, '.env')) = находится она в BASE_DIR
использование
SECRET_KEY = env('SECRET_KEY')
DEBAG = env.bool('DEBAG')

______________________________________________________________________________________

отдельный вебсервер
manage.py runserver + можно использовать при создании
                    - не презапускается автоматически
                    - не выдерживает больших нагрузок

webserver+wsgi      - нельзя использовать при разработке
                    - легкость в обслуживании
                    + скорость
                    + использование в пром

облачное решение    - нельзя использовать при разработки
                    + скорость
                    + использование в пром
                    + легкость в обслуживании

на данном этапе будем использовать  Noinx Web Server
нужно оно для того, чтобы обращаться к нашему проэкту по имени (хоста или ip адресу)
может так же управлять таблицами, файлами,...
- развертываем сервер для запуска приложения

1. Создаем сервер

2. Создаем пользователя и назначаем его superuser:
adduser sergey -создаем пользователя
usermod sergey -aG sudo -назначаем суперпользователем
переключаемся на созданного пользователя
su sergey

3. переходим в его домашнюю директорию, и обновляем список пакетов cd ~ .
sudo apt update
инсталируем все что нам нужно. А именно:
sudo apt install python3-venv python3-pip postgres nginx
после все проверяем на установку пакетов

4. Запускаем сервер nginx
sudo systemctl start nginx
проверияем работу сервера комендой
sudo systemctl status nginx

4.1 идем на git hub - копируем нужный репозиторий (ссылку)
возвращаемся на сервер и делаем клон репозитория
git clone далее путь который скопировали
переходим в нужную папку
(данном случае djabngo)
запускаем виртуальное окружение python3 -m venv env (-env это название папки. какое название будет указано такое и нужно будет активировать)
активируем виртуальное окружение
source env/bin/activate

5. создаем виртуальное окружение в папке проекта
python3 -m venv env (-env это название папки. какое название будет указано такое и нужно будет активировать)

6. Активируем окружение
source env/bin/activate

7. Устанавоиваем все необходимые пакеты из файла requirements.txt
pip install -r requirements.txt
и проверям, что установлено все нужное
pip freeze

8. настраиваем настороки
nano settings.py в фале заводим файл и записываем туда все переменеммные которые хотим скрыть +пароли
создаем файил .env - и записываем переменные в него
9. Создаем базу данных
sudo su postgres
psql
назначаем пользователю пароль
ALTER USER postgres WIHT PASSWORD '1234';
создаем базу данных
CREATE DATABASE my_db;
Выходим из postgres
exit

10. После замены данных нужно сделать миграцию и она должна пройти
python3 manage.py migrate
для проверки тоого, что все работем запускаем в тесте сервер
python3 manage.py runserver 0.0.0.0:8000



11. устанавливаем библиотеку gunicorn - делает постоянную работу веб приложения на сервер
(для этого можно добавить в файл requirements.txt или выполнить установку вручную)
если нужно запустить вручную требуется:
    1.перейти в папку,  где находится settings.py и найти там файл wsgi.py

    2. Запускаем активацию source env/bin/activate

    3. запускаем gunicorn
    gunicorn stocks_products.wsgi -b 0.0.0.0:8000 - запусти gunicorn из папки с параметром
    где stocks_products - название папки где лежит wsgi

    4. настройка для того, чтобы было постоянно активно
    sudo nano /etc/systemd/system/gunicorn.service - добовляем в систему процесс который будет постоянно крутится и назвается он gunicorn.service

    5. Описываем процесс в файле который ткрылся через nano

    [Unit] - описывает что за процесс
    Description=Можно написать любую инфу
    After=network.target - запускать после сетевых служб

    [Service]
    User= указывается пользователь
    Group=www-data
    WorkingDirectory=- указываем путь до папки где лежит manage.py
    ExecStart=/netology/...../env/bin/gunicorn stocks_products.wsgi --workers 3 --bind unix:/home/sergey/temp.sock stocks_products.wsdi:application -как запускать проект (workers - это колличесво копий проекта)
    указываем путь где лежить wsgi
    unix - указываем где будет создаваться временная папка (желательно ее указать в проекте)
    (cрасширением .sock)
    stocks_products.wsgi:application - переменная application
ExecStart=/home/sergey/netology/DJANGO/dz4_django/m2m-relations/env/bin/gunicorn --workers 1 --bind unix:/home/sergey/netology/DJANGO/dz4_django/m2m-relations/project.sock website.wsgi:application
    [Install]
    WantedBy=multi-user.target

путь_до_гуникорна --workers количество_воркеров --bind путь_до_папки_Django_проекта/файл_сокета_gunicorn.sock название_папки_Django_проекта.wsgi:application


12. Запускае сервер sudo systemctl start gunicorn.service
                    sudo systemctl enable gunicorn.service
так как мы назвали при создании его sudo nano/etc/systemd/system/gunicorn.service
при запуске пишем gunicorn
Затем sudo systemctl enable gunicorn.service - enable для того, чтобы он перешел в автозагрузку
проверяем чтобы работало sudo systemctl status gunicorn.service

+

13. Настраеваем webserver
    1. создаем файл (название любое)
    sudo nano /etc/nginx/sites-availabe/назваение файла
server {
    listen 80; - порт поумолчанию
    server_name адрес сайта;

    location /static/ { -указывается куда нужно обратиться для получения файлов
    root /home/sergey/папка проекта;
    }
    location / { - все остальные запросы нужно перенаправлять
    include proxy_params;
    proxy_pass http://unix:/home/...../temp.sock;
    }
    }
    3.Включаем сайт из доступных в запущенные
    sudo ln -s /etc/nginx/sites-availabe/django /etc/nginx/sites-enable/
    sudo systemctl restart nginx - перезапускаем nginx так как была обновлена конфигурация
    проверяем статус
    sudo systemctl status nginx

    4. если сайт не запустится, попробовать следующее
    sudo nano /etc/nginx/nginx.conf
    в этом файле изменить user на root или на своего пользователя

14. Разбираемся со статикой (статические файлы)
    1. Открыаем settings.py на редактирование.
    находим настройку STATIC_URL. И под ней нужно добавить страку
    STATIC_ROOT = os.path.join(BASE_DIR, 'static') -нитри BASE_DIR буден находиться папка с названием static. она будет находиться в одной папке с manage.py
    2. для появление папки активируем виртуальное окружение
    source env/bin/activate
    запускаем python3 manage.py collectstatic

