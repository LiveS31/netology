Doker

- это комплекс програмного обеспеченья для виртуализации
  на уровне операционной системы

что такое:
    контейнер - это запущенный процесс (програма которая работает)

    image - основа для контейнера и контекста(типа инструкции, как нужно запустить контейнер)

    volumes - объем выделенной памяти для использывания в контейнере
                (не хранит постоянноо данные)
            * ранят данные ТОМа
                + объединение между разными контейнерами
                + архивировать и шифровать содержимое
                + подключать внешние источники из облака или внешних носителей
                + использовать многократно
    networks - сетевой драйвер
        * bridge - сетевой  драйвер по умолчанию. Каждый контейнер работает изолировано, при необходимости маршруты настраиваются в ручную
        * host - для автоматических контейнеров, убирается изоляция и сеть с хостовой машиной общая
        * overlay - соединяющее несколько демонов -Dockers. Это необхожимо для выполнения маршрутизации OS между контейнерами
        * macvlan - позволяет назначить MAC-адреса контейнеру, чтобы он отображался, как физическое устройство
        * none - для этого контейнера отключено
        * user-plugins - можно устанавливать и использовать сторонние сетевые плагины Dockers

-----практика
  1. открыть старницу dacker.oi
  2. установить doker для установленной оп.системы
  https://docs.docker.com/engine/install/ubuntu/
  3. sudo docker ps <показывает, что запущено/ если сделать sudo docker ps -a  то будет выведены все сообщения>
  4. sudo docker run hello-world
(если выводится большое сообщение - значил все сделано правильно)
  5. Запускаем новый конйтейней docker run -it busybox ( -it -это интерактивная среда, busybox - название контейнера с кучей полезностей)
  6. ls -la <поспотреть что в контейнере>
  (например если сделать ping google.com <будут видны пинги - значит что контейнер имеет доступ в интернет>)
  7. exit <выход из doker>
  8. sudo docker pull nginx <проверяем версию nginx>
  9. sudo docker run nginx <запуск nginx в контейнере>
10. описание
  1. CONTAINER ID - нужен для обращения, и действий
  2. IMAGE - для понимания какой мы образ используем
  3. COMMAND - какая команда была использована для запуска контейнера
  4. CREATED - когда был создан
  5. STATUS - состояние
  6. PORTS - какой порт открыт внутри контейнера
  7. NAMES - имя контейнера
11. sudo docker logs _имя_контейнера_ <просмотр логов>
    sudo docker logs _имя_контейнера_ <просмотр логов>
12. sudo docker container --help
13. заускам docker нормально
sudo docker run --name netology_nginx -p 8888:80 -d nginx
sudo docker run - запускаем
--name netology_nginx - с именем
-p 8888:80 - на порт
-d - отдача консоли можно продожать работать в консоли
nginx - название
после ввода возвращается id контейнера
14. curl - команда отправки запросов
curl localhost:80 (для примера/ postman - графическая обертка над курл))
15. как подключить тома:
sudo docker run -p 8889:80 -d -v _ПУТЬ_К_ДЕРЕКТОРИИ\\html://...../nginx/html nginx
(sudo docker run -p 8890:80 -d -v ~/Загрузки/html:/user/share/nginx/html nginx)
~/Загрузки/html путь к фйлу или директориии
/user/share/nginx/html куда перекидывается ссылка
16. sudo docker inspect _name_ or _container_ <полная инормация о контейнере>
17. docker фаил:(Dockerfile)
FROM python:3.9 <версия исползуемого пятона. python:3.9-alpine -для уменьшения размера >
RUN apk add --no-cach gcc musl-dev linux-headers <если устанавливается python:3.9-alpine>

COPY . /src <скопируй все из текущей директории в директорию контейнера (src)>
RUN pip3 install --no-cache-dir --uprgade -r /src/requirements.txt <скачай установи и обнови все зависимости>
ENV MY_ENV=netology <создай перемненную со значением netology>
WORKDIR src

EXPOSE 6060 <будет открыт порт 6060>

CMD ["python3","-u","main.py", "--host", "0.0.0.0", "-port", "6060"] <
CMD - запускае проект на порту 6060>

18. собираем приложение
sudo docker build . --tag=my_app_13_07 < . - из какой директории, my_app_13_07 - название приложения>

sudo doker run -d -p 8880:6060 my_app_13_07 <запускаем приложение>
curl localhost:8880/actuator/health <делаем запрос. /actuator/health- путь для запроса >

19. Для оптимизации
docker фаил:(Dockerfile)
FROM python:3.9 <версия исползуемого пятона. python:3.9-alpine -для уменьшения размера >
RUN apk add --no-cach gcc musl-dev linux-headers <если устанавливается python:3.9-alpine>
COPY ./requirements.txt /src/requirements.txt <скоприровать из в>

RUN pip3 install --no-cache-dir --uprgade -r /src/requirements.txt <скачай установи и обнови все зависимости>
COPY . /src <скопируй все из текущей директории в директорию контейнера (src)>
ENV MY_ENV=netology <создай перемненную со значением netology>
WORKDIR src

EXPOSE 6060 <будет открыт порт 6060>

CMD ["python3","-u","main.py", "--host", "0.0.0.0", "-port", "6060"] <
CMD - запускае проект на порту 6060>

=====================
дз
======================
