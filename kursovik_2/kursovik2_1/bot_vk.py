import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
#from token import GROUP_TOKEN

import configparser
config =configparser.ConfigParser()
config.read('.pass.ini')
#token_vk = config['vk']['KEY_GROUP']
GROUP_TOKEN = config['vk']['KEY_GROUP']
from vkinder import VKinder_get_info, VKinder_get_photo, get_user_param
from vkinder import MessagesSend
from ins_data import ins_data, ins_fav_data, ins_propose_data, select_fav_client, sel_user_data, ins_user_client

vk_session = vk_api.VkApi(token=GROUP_TOKEN)
start_keyboard = VkKeyboard(inline=True)
start_keyboard.add_button("–°—Ç–∞—Ä—Ç", VkKeyboardColor.PRIMARY)
main_keyboard = VkKeyboard(inline=True)
main_keyboard.add_button("–ê–≤—Ç–æ", VkKeyboardColor.PRIMARY)
main_keyboard.add_button("–ó–∞–ø—Ä–æ—Å", VkKeyboardColor.PRIMARY)
main_keyboard.add_button("‚ù§‚ù§‚ù§", VkKeyboardColor.PRIMARY)
find_keyboard = VkKeyboard(inline=True)
find_keyboard.add_button("‚ù§", VkKeyboardColor.PRIMARY)
find_keyboard.add_button("–î–∞–ª–µ–µ", VkKeyboardColor.PRIMARY)
find_keyboard.add_button("–°—Ç–æ–ø", VkKeyboardColor.PRIMARY)
next_keyboard = VkKeyboard(inline=True)
next_keyboard.add_button("–î–∞–ª–µ–µ", VkKeyboardColor.PRIMARY)
next_keyboard.add_button("–°—Ç–æ–ø", VkKeyboardColor.PRIMARY)


def write_msg(user_id, message, keyboard=None):
    post = {'user_id': user_id, 'message': message, 'random_id': 0}

    if keyboard is not None:
        post['keyboard'] = keyboard.get_keyboard()

    vk_session.method('messages.send', post)


user_info = []


def bot():
    key_word = ['—Å—Ç–∞—Ä—Ç', '‚ù§', '‚ù§‚ù§‚ù§', '—Å—Ç–æ–ø', '–∞–≤—Ç–æ', '–∑–∞–ø—Ä–æ—Å']
    req_err = False
    longpool = VkLongPoll(vk_session)
    for event in longpool.listen():
        if event.type == VkEventType.MESSAGE_NEW:
            if event.to_me:
                message = event.text.lower()
                print(f'main {message}')

                if message == '–∑–∞–ø—Ä–æ—Å':
                    write_msg(event.user_id, f'–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤–æ–∑—Ä–∞—Å—Ç,\n'
                                             f'–ø–æ–ª(–º/–∂) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª:')

                if str(message) == '–∞–≤—Ç–æ':
                    try:
                        auto_string = get_user_param(event.user_id)
                        auto_keyboard = VkKeyboard(inline=True)
                        auto_keyboard.add_button(auto_string, VkKeyboardColor.PRIMARY)
                        write_msg(event.user_id, f'–ü–æ–¥–±–æ—Ä –ø–æ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º:', auto_keyboard)
                    except KeyError:
                        KeyError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: –ø–æ–ª, –¥–∞—Ç—É –∏ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è!")
                        write_msg(event.user_id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –í–ö. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ: –≥–æ—Ä–æ–¥, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª(–º/–∂).',
                                  main_keyboard)

                if message not in key_word and message != '–¥–∞–ª–µ–µ':
                    try:
                        req_err = False
                        message = ",".join(message.split(" ")) if len(message.split(',')) == 1 else message
                        print(message)
                        if len(message.split(',')) != 3:
                            write_msg(event.user_id,
                                      '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
                        response = message.split(",")
                        response = [i.strip().title() for i in response]
                        city, age, sex = response
                        if sex.lower() not in ('–º', '–∂'):
                            write_msg(event.user_id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª (–º –∏–ª–∏ –∂).')
                            print(f' sex _{sex}_ {message}')
                            req_err = True
                        if age.isdigit() is not True:
                            write_msg(event.user_id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).')
                            req_err = True
                        if int(age) < 16:
                            write_msg(event.user_id, '–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è 16.')
                            req_err = True
                        if req_err is False:
                            print('req_err is False:')
                            print(f'sex {sex} age {age} city {str(city.title())} user id {event.user_id}')
                            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±. Users
                            ins_data(event.user_id, int(age), str(sex).lower(), str(city.title()))
                    except ValueError:
                        ValueError("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                        write_msg(event.user_id, '–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑: –ì–æ—Ä–æ–¥, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª(–º/–∂).')
                        req_err = True

                if req_err is False and message not in key_word:
                    req = sel_user_data(event.user_id)
                   # print(f'sex {req[-1][2]} age {req[-1][1]} city {str(req[-1][3].title())} user id {event.user_id}')
                    info = VKinder_get_info(str(req[-1][2]).lower(), int(req[-1][1]), str(req[-1][3].title())).get_inf(
                        event.user_id)
                    #print(f'sex {sex} age {age} city {str(city.title())} user id {event.user_id}')
                    # info = VKinder_get_info(str(sex).lower(), int(age), str(city.title())).get_inf(
                    #     event.user_id)

                    if info is None:
                        write_msg(event.user_id, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', main_keyboard)
                        print(f'info None!!!!')
                    else:
                        if len(info) != 0:
                            write_msg(event.user_id, f'{info[0]} {info[1]} - {info[3]}')
                            print(f'info {info}')
                            # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±. Propose
                            print(f'{event.user_id} fff {info[0]} {info[1]} - {info[3]}')
                            print(user_info)
                            # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±. Propose
                            ins_propose_data(event.user_id, info[2])
                            if [f"{event.user_id}, {sex}, {age}, {city}"] not in user_info:
                                user_info.append([f"{event.user_id}, {sex}, {age}, {city}"])
                            photos = VKinder_get_photo(info[2]).get_photo_url()

                            if photos is not None:
                                for i in photos:
                                    print(i)
                                    MessagesSend(event.user_id, i).send_photo()
                            write_msg(event.user_id, f'–ù–∞–∂–º–∏—Ç–µ ‚ù§, –µ—Å–ª–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è;\n'
                                                     f'"–î–∞–ª–µ–µ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞;\n'
                                                     f'"–°—Ç–æ–ø" –≤—ã—Ö–æ–¥.', find_keyboard)

                        else:
                            write_msg(event.user_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                                      main_keyboard)

                if message == '‚ù§':
                    photos = VKinder_get_photo(info[2]).get_photo_url()
                    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è —á–µ–ª–æ–≤–µ–∫–∞ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
                    ins_fav_data(event.user_id, info[2], info[0], info[1], info[3], photos)
                    write_msg(event.user_id, f'‚ù§ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ;\n', next_keyboard)

                if message == '‚ù§‚ù§‚ù§':
                    write_msg(event.user_id, f'‚ù§ –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö ‚ù§')
                    favorites = select_fav_client(event.user_id)
                    for item in favorites:
                        write_msg(event.user_id, f'{item[2]} {item[1]} - {item[3]}')
                        # for i in item[4].split(","):
                        #     i = i.replace('{', '').replace('}', '')
                        #     print(f'fav - {i}')
                        #     MessagesSend(event.user_id, i).send_photo()

                    write_msg(event.user_id, f'‚ù§‚ù§‚ù§end‚ù§‚ù§‚ù§')
                    message = '—Å—Ç–æ–ø'

                if message == '—Å—Ç–æ–ø':
                    write_msg(event.user_id, f'–í—ã —Å–Ω–æ–≤–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é üëã\n'
                                             f'‚ù§‚ù§‚ù§ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö\n'
                                             f'–∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫', main_keyboard)


def run_bot():
    while True:
        longpool = VkLongPoll(vk_session)
        for event in longpool.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    message = event.text.lower()

                    if str(message) == '—Å—Ç–∞—Ä—Ç':
                        write_msg(event.user_id, f'–í–≤–µ–¥–∏—Ç–µ –ê–≤—Ç–æ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞,\n'
                                                 f'–ó–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É,\n'
                                                 f'‚ù§‚ù§‚ù§ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö.', main_keyboard)

                        return bot()

                    else:
                        write_msg(event.user_id, f'–ü—Ä–∏–≤–µ—Ç ü§ó\n'
                                                 f'Vkinder6 –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å!\n'
                                                 f'–•–æ—Ç–∏—Ç–µ —Å –∫–µ–º –Ω–∏–±—É–¥—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?\n'
                                                 f'–ù–∞–∂–º–∏—Ç–µ "–°—Ç–∞—Ä—Ç"!!!', start_keyboard)
                        continue
run_bot()